#include <SparkFun_ADXL345.h>


ADXL345 adxl = ADXL345();    
int x,y,z;                     // x,y,z축 설정

// 자이로
#include <VirtualWire.h> 
#include <string.h>
 
  byte message[VW_MAX_MESSAGE_LEN];          //받은 메세지 저장할 임시변수 선언           
  byte messageLength = VW_MAX_MESSAGE_LEN;  //받은 메세지의 길이 설정 
 
 int ledPin = 13;                           // LED 핀 13번 설정
 // 수신부
 #include <Bounce2.h>             //바운싱 현상을 방지하기 위해 라이브러리 사용
 
 int buttonPin = 2;              //버튼 핀 2번 설정
 boolean oneTimeFlag;            //LED 상태를 알려주는 boolean설정
 
 Bounce bouncer = Bounce();    
// 송신부
 int buzzer = 7;                //부저 핀 7번 설정
 // 부저
 void setup(){                  
  Serial.begin(9600);           // 전송 속도 설정
  adxl.powerOn();               // ADXL345의 전원 on

  adxl.setRangeSetting(4);      // 감도 설정(가장 높은 2부터 가장 낮은 16까지 중 4 선택)
  adxl.setSpiBit(0);            // 기기 연결
  // 자이로
   vw_setup(2000);              //수신부 초기 설정
   vw_set_rx_pin(4);            //수신 핀 4번 설정
   vw_rx_start();               //수신 시작
   pinMode(ledPin, OUTPUT);     //LED 핀은 출력으로 설정 
  // 수신부
   pinMode(buttonPin, INPUT);      //버튼 핀을 입력으로 설정
   digitalWrite(buttonPin, HIGH);   
   bouncer.attach( buttonPin ); 
   bouncer.interval(5);            // 바운싱 간격을 5ms로 설정
    
     
  vw_set_tx_pin(3);                //송신 핀 설정    
  // 송신부
  pinMode(buzzer,OUTPUT);          // buzzer를 출력핀으로 설정합니다.
  // 부저
}
void loop(){              
  adxl.readAccel(&x, &y, &z);  // 자이로센서에서 측정된 값을 x,y,z에 입력
  sendAccelToProcessing();     // 입력된 값을 전달
  // 자이로
  if (vw_get_message(message, &messageLength)) {       //메세지 읽어옴
     for(int i=0;i<messageLength;i++){
        Serial.write(message[i]);                     //메세지를 시리얼모니터를 통해 확인
        Serial.print("\n");
        if(message[0] == '1'){                        //메세지 '1'(on)을 받으면
          digitalWrite(ledPin, HIGH);                 //LED가 켜지도록 설정
          buzzeron();                                 //부저함수를 통해 부저가 울리도록 설정
          Serial.write("buzzer_is_on\n");
        } 
        else{                                         //메시지 '2'(off)를 받으면
          digitalWrite(ledPin, LOW);                 //LED 가 꺼지고
          buzzeroff();                               //부저함수를 통해 부저가 꺼지도록 설정
        }
      }
     }
 // 수신부
   if (bouncer.update()){                //버튼이 업데이트 되면(버튼을 누르거나 떼면)
      if(oneTimeFlag==false){            //LED가 꺼진 상태라면
        Serial.println("on");            //시리얼 모니터에 on을 출력하고
        sendmes("1");                    //수신부에 "1" 전송 후
        oneTimeFlag=true;                //LED 점등
       
      }else{                             //LED가 켜진 상태라면
        Serial.println("off");           //시리얼 모니터에 off를 출력하고
        sendmes("2");                    //수신부에 "2" 전송 후
        oneTimeFlag=false;               //LED 소등
      }
    }else{                               //버튼에 변화가 없다면
      if (oneTimeFlag==false){           //LED가 꺼진 상태라면
        Serial.println("off");           //시리얼 모니터에 off를 출력하고
        sendmes("2");                    //수신부에 "2" 전송 후 
        oneTimeFlag=false;               //LED 소등
       }else{                            //LED가 켜진 상태라면
        Serial.println("on");            //시리얼 모니터에 on을 출력하고
        sendmes("1");                    //수신부에 "1" 전송 후
        oneTimeFlag=true;                //LED 점등 
        
       }
    }
    // 송신부
  delay(100);                            //loop함수 전체에 0.1초 딜레이
}

void sendAccelToProcessing(){           //x,y,z값을 전송하는 함수
  unsigned long active_value = 0;       
  int gx, gy, gz;                       
  gx = x-3;
  gy = y-2;
  gz = z-119;                           //변수 설정

  active_value = active_value + abs(gx) + abs(gy) + abs(gz);
  if ( active_value> 500 )             //active_value가 500이상이라면
  {
    Serial.print("\n Active : ");     
    Serial.print(active_value);
    Serial.print("\n");               //시리얼 모니터에 active_value값 출력
  }
}
void sendmes(const char *message) {                        //메세지를 보내는 함수
      vw_send((uint8_t *)message, strlen(message));        //메세지 전송
      vw_wait_tx();                                        //메세지 전송 완료시 까지 기다림
    } 
void buzzeron(){                        //부저를 켜는 함수
   tone(buzzer,956);
   delay(500);                          //부저에 0.5초간 도를 출력
   tone(buzzer,1014);
   delay(500);                          //부저에 0.5초간 레를 출력
   tone(buzzer,1136);
   delay(500);                          //부저에 0.5초간 미를 출력
   tone(buzzer,1275);
   delay(500);                          //부저에 0.5초간 파를 출력
 // 부저
}
void buzzeroff(){                       //부저를 끄는 함수
  noTone(buzzer);                       //부저 종료
}